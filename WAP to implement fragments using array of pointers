	
/*
Name  : Nishanth R
Date  : 23.12.2021
Description : WAP to implement fragments using array of pointers
Sample execution  : ./fragmentsEnter
Enter no.of rows : 3
Enter no of columns in row[0] : 4
Enter no of columns in row[1] : 3
Enter no of columns in row[2] : 5
Enter 4 values for row[0] : 1 2 3 4
Enter 3 values for row[1] : 2 5 9
Enter 5 values for row[2] : 1 3 2 4 1
Before Sorting output is:
1 2 3 4 2.5
2 5 9 5.33
1 3 2 4 1 2.22
After Sorting output is:
1 3 2 4 1 2.22
1 2 3 4 2.5
2 5 9 5.33
Do you want to continue(Y/y) : N
*/



#include <stdio.h>  // Declare header files
#include <stdlib.h>

void fun_fragmants(int row, float **arr, int *tmp, float *savg); // Declare functions
void fun_display(int row, float **arr, int *tmp);

int main()
{
        char choice;        // Declare variables
        int row, col, i, j, tmp[20];
        float sum, avg;
       
        do{
                sum = avg = 0;

                printf("Enter a number of rows : ");
                scanf("%d",&row);       // Read number of rows
               
                float *arr[row]; // Declare a 2D-array where it row is static and coloum is dynamic

                for (i = 0; i < row; i++)
                {
                        printf("Enter No of coloum for row[%d] : ", i);
                        scanf("%d", &col);   // Read number of columns from user

                        tmp[i] = col + 1;
                        arr[i] = calloc (col + 1, sizeof(float));  // Dynamic memory allocation
                }


                float savg[row];

                //Read elements for each row and also find average of each row
                for (i = 0; i < row; i++)
                {
                        printf("Enter elements for row[%d] : ", i);

                        for (sum = avg = 0, j = 0; j < tmp[i] - 1; j++)
                        {
                                scanf(" %f", &arr[i][j]);
                                sum = sum + arr[i][j];
                        }
                        avg = sum/(tmp[i] - 1);

                        // Store a average of row at end of each row
                        arr[i][j] = avg;
                        savg[i] = avg;
                }

                //Print a array before sorting
                printf("Before sort : \n");
                fun_display(row, arr, tmp);

                fun_fragmants(row, arr, tmp, savg);    // Call a Funcion

                printf("After sort : \n");  // Print output
                fun_display(row, arr, tmp);

                for (int i = 0; i < row; i++)
                        free(arr[i]);

                printf("Do you want to continue (y/n) :");
                scanf(" %c", &choice);
        } while (choice == 'y' || choice == 'Y');
        return 0;
}

void fun_fragmants(int row, float **arr, int *tmp, float *savg) // Function for fragmants
{
        float *ptr, swp; // Declare a local variables
        int i, j, p;

        //Loop for compair average and sort a row based on it average
        for (i = 0; i < row - 1; i++)
        {
                for (j = (i + 1); j < row; j++)
                {
                        if (savg[i] > savg[j])
                        {
                                ptr = arr[i];     // Swap a address of row
                                arr[i] = arr[j];
                                arr[j] = ptr;

                                swp = savg[i];    // Swap a average
                                savg[i] = savg[j];
                                savg[j] = swp;

                                p = tmp[i];           // Swap a coloums
                                tmp[i] = tmp[j];
                                tmp[j] = p;
                        }
                }
        }
}
void fun_display(int row, float **arr, int *tmp) //Function for a display array
{
        printf("\n");
        for (int i = 0; i < row; i++)   // Loop for print a array
        {
                for (int j = 0; j < tmp[i]; j++)
                {
                        printf("%g ",arr[i][j]);
                }
                printf("\n");
               
        }
        printf("\n");
}
