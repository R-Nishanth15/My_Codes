/*
Name   : Nishanth R
Date  : 23.12.2021
Description  :provide a menu to manipulate or display the value of variable of type t
Input:
Menu :Select function :
1. Add element
2. Remove element
3. Display element
4. Exit from the program
Enter your choice : 1
Enter the type you have to insert:
1.int
2.char
3.short
4.float
5.double
Enter your choice : 1
Enter the integer : 12
12
Select function :
1. Add element
2. Remove element
3. Display element
4. Exit from the program
Enter your choice : 3

[0] -> 12    [int_type]

Select function :
1. Add element
2. Remove element
3. Display element
4. Exit from the program
Enter your choice : 2
[0] -> 12
Enter the index value to be deleted : 0
Index 0 is successfully deleted

Select function :
1. Add element
2. Remove element
3. Display element
4. Exit from the program

*/

#include<stdio.h>
#include<stdlib.h>

int main()
{
        int choice, option, index;        // decalaring int variable
        int pos[5];

        int c_flag = 0, s_flag = 0, i_flag = 0, f_flag = 0, d_flag = 0;

        void *ptr; // declaring pointer variable
        ptr = malloc ( 8 * sizeof(char));    //allocating 8 consecutaive memory

        while (1)
        {
                printf("\nSelect function :\n1. Add element\n2. Remove element\n3. Display element\n4. Exit from the program\nEnter your choice : ");  

                scanf("%d",&choice);   // switch case for option
                switch(choice)
                {
                        case 1:        // adding element
                                {
                                        printf("Enter the type you have to insert:\n1.int\n2.char\n3.short\n4.float\n5.double\n");
                                        printf("Enter your choice : ");
                                        scanf("%d",&option);      

                                        switch (option)
                                        {
                                                case 1:
                                                        if ( i_flag == 0 && f_flag == 0 && d_flag == 0)
                                                        {
                                                                i_flag++;
                                                                printf("Enter the integer : ");  
                                                                scanf("%d",((int*)ptr) + 1);        //read the integer number from user
                                                                printf("%d",*(((int*)ptr) + 1) );  
                                                        }
                                                        else
                                                                printf("Memory is occupied\n");
                                                        break;
                                                case 2:
                                                        if( c_flag < 2 && d_flag == 0    )
                                                        {
                                                                printf("Enter the character : ");
                                                                scanf(" %c",((char*)ptr) + c_flag); //read the char from user
                                                                printf("%c\n",*(((char*)ptr)+ c_flag) );
                                                                c_flag++;
                                                        }
                                                        else
                                                                printf("Memory is occupied\n");
                                                        break;
                                                case 3:
                                                        if ( s_flag == 0 && d_flag == 0 )
                                                        {
                                                                s_flag++;
                                                                printf("Enter the integer (short) : ");
                                                                scanf("%hd",((short*)ptr) + 1);        //read the short number from user
                                                                printf("%hd",*(((short*)ptr) + 1) );
                                                        }
                                                        else
                                                                printf("Memory is occupied\n");
                                                        break;
                                                case 4:
                                                        if ( i_flag == 0 && f_flag == 0 && d_flag == 0)
                                                        {
                                                                f_flag++;
                                                                printf("Enter the float value : ");
                                                                scanf("%f",((float*)ptr) + 1);    //read the float number from user
                                                                printf("%f",*(((float*)ptr) + 1) );
                                                        }
                                                        else
                                                                printf("Memory is occupied\n");
                                                        break;
                                                case 5:
                                                        if ( c_flag == 0 && i_flag == 0 && s_flag == 0 && f_flag == 0 && d_flag == 0)
                                                        {
                                                                d_flag++;
                                                                printf("Enter the double value : ");
                                                                scanf("%lf",((double*)ptr) );        //read the double value from user
                                                                printf("%lf",*((double*)ptr) );
                                                        }
                                                        else
                                                                printf("Memory is occupied\n");
                                                        break;
                                                default :
                                                        printf("Invalid option");
                                        }
                                        break;          
                                }
                        case 2:    // remove element
                                {
                                        index = 0;  
                                        // printing the with the position of the 8 consecutive memory

                                        if ( c_flag > 0 )
                                        {
                                                printf("[%d] -> %c\n",index, *((char*)ptr));    // ist char
                                                pos[index++] = 1;
                                                if ( c_flag > 1 )
                                                {
                                                        printf("[%d] -> %c\n",index, *(((char*)ptr)+ 1) );    // 2nd char
                                                        pos[index++] = 1;
                                                }
                                        }
                                        if ( s_flag == 1 )
                                        {
                                                printf("[%d] -> %hd\n",index, *(((short*)ptr) + 1) );    // 3rd and 4th for short
                                                pos[index++] = 2;
                                        }
                                        if ( i_flag == 1 )
                                        {
                                                printf("[%d] -> %d\n",index, *(((int*)ptr) + 1) );        // 5th to 8th for int
                                                pos[index++] = 3;
                                        }
                                        if ( f_flag == 1 )
                                        {
                                                printf("[%d] -> %f\n",index, *(((float*)ptr) + 1) );        //5th to 8th for float
                                                pos[index++] = 4;
                                        }
                                        if ( d_flag == 1 )
                                        {
                                                printf("[%d] -> %lf\n",index, *((double*)ptr) );    //full memory to double
                                                pos[index++] = 5;
                                        }
                                        printf("Enter the index value to be deleted : ");
                                        scanf("%d",&index);  

                                        switch ( pos[index] )
                                        {
                                                case 1 :    //removing char
                                                        if ( c_flag > 0 )  
                                                        {
                                                                if (  index == 0 )
                                                                {
                                                                        *((char*)ptr) = *(((char*)ptr)+ 1);
                                                                        c_flag--;
                                                                }
                                                                if ( index == 1 )
                                                                {
                                                                        c_flag--;
                                                                }
                                                                printf("Index %d is successfully deleted \n",index);
                                                        }
                                                        else
                                                                printf("Already deleted\n");
                                                        break;
                                                case 2:    // Removing short
                                                        if ( s_flag == 1 )
                                                        {
                                                                s_flag--;
                                                                printf("Index %d is successfully deleted \n",index);
                                                        }
                                                        else
                                                                printf("Already deleted\n");
                                                        break;
                                                case 3:    //removing int
                                                        if ( i_flag == 1 )
                                                        {
                                                                i_flag--;
                                                                printf("Index %d is successfully deleted \n",index);
                                                        }
                                                        else
                                                                printf("Already deleted\n");
                                                        break;
                                                case 4:    //removing float
                                                        if ( f_flag == 1 )
                                                        {
                                                                f_flag--;
                                                                printf("Index %d is successfully deleted \n",index);
                                                        }
                                                        else
                                                                printf("Already deleted\n");
                                                        break;
                                                case 5:    //removing double
                                                        if ( d_flag == 1 )
                                                        {
                                                                d_flag--;
                                                                printf("Index %d is successfully deleted \n",index);
                                                        }
                                                        else
                                                                printf("Already deleted\n");
                                                        break;
                                                default :
                                                        printf("Invalid option");
                                        }
                                        break;
                                }
                        case 3:    // displaying element
                                {
                                        index = 0;
                                        printf("\n");
                                        if ( c_flag > 0 )
                                        {
                                                printf("\n[%d] -> %c\t[char_type]\n",index++, *((char*)ptr));

                                                if ( c_flag > 1 )
                                                        printf("[%d] -> %c\t[char_type]\n",index++, *(((char*)ptr)+ 1) );  
                                        }
                                        if ( s_flag == 1 )
                                                printf("[%d] -> %hd\t[short_type]\n",index++, *(((short*)ptr) + 1) );

                                        if ( i_flag == 1 )
                                                printf("[%d] -> %d\t[int_type]\n",index++, *(((int*)ptr) + 1) );

                                        if ( f_flag == 1 )
                                                printf("[%d] -> %f\t[float_type]\n",index++, *(((float*)ptr) + 1) );

                                        if ( d_flag == 1 )
                                                printf("[%d] -> %lf\t[double_type]\n",index++, *((double*)ptr) );

                                        if ( c_flag == 0 && i_flag == 0 && s_flag == 0 && f_flag == 0 && d_flag == 0)
                                                printf("Nothing available all indexes are empty\n");
                                        break;
                                }
                        case 4 :    // exit the program
                                free(ptr);
                                ptr = NULL;
                                exit(1);
                                break;
                        default :
                                printf("Invalid option\n");
                }
        }
}
